#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPUpdateServer.h>


const char* ssid = "veronikav";
const char* password = "2412198700";
const char* mqtt_server = "192.168.0.77";

ESP8266WebServer httpServer(80);
ESP8266HTTPUpdateServer httpUpdater;
WiFiClient espClient;
PubSubClient client(espClient);


char* room = "Коридор1";
long lastMsg = 0;
char answ[9];
int startup = 0;
String ip;
//String h_ind;
int t;
int but_1 = 16; //D0
int but_2 = 12; //D6

int but1_state;
int but2_state;



void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

bool reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");

      // Once connected, publish an announcement...
      Serial.println(startup);
      client.publish("Коридор1", "hello world");
      // ... and resubscribe
      client.subscribe("Коридор1");
            client.publish("Коридор1", "startup");

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying    
        delay(500);
  //  }
  }
}
}

void setup() {
 pinMode(but_1, INPUT);
 pinMode(but_2, INPUT);



  Serial.begin(9600);

  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  //client.setCallback(callback);

  httpUpdater.setup(&httpServer);
  httpServer.begin();
   Serial.println(" i'm ok1");
  Serial.println(WiFi.localIP());
  ip = WiFi.localIP().toString();
  Serial.println(" i'm ok2");
  Serial.printf("HTTPUpdateServer ready! Open http://%s.local/update in your browser\n");


}

void loop() {
 httpServer.handleClient();

if (but1_state != digitalRead(but_1)) 
  {
  if (digitalRead(but_1) == 1 )
  {client.publish(room, "5/0/3"); but1_state = 1; Serial.println("btn 1 - HIGH");}
  
  if (digitalRead(but_1) == 0 )
  {client.publish(room, "5/1/3"); but1_state = 0; Serial.println("btn 1 - LOW");}
  }  
    if (but2_state != digitalRead(but_2)) 
  {
    Serial.println(but2_state);
    Serial.println(digitalRead(but_2));
   
  if (digitalRead(but_2) == 1 )
  {client.publish(room, "5/0/3"); but2_state = 1; Serial.println("btn 2 - HIGH");}
  
  if (digitalRead(but_2) == 0 )
  {client.publish(room, "5/1/3"); but2_state = 0; Serial.println("btn 2 - LOW");}
  }

 long now = millis();
  if (now - lastMsg > 20000) {
    lastMsg = now;
    client.publish("Коридор1",  "Коридор_прохідні_вимикачі/ip");
    client.publish("Коридор1",  ip.c_str());
  }

  if (!client.connected()) {
    reconnect();
      startup= startup+1;  


  }
  
  client.loop();
}
